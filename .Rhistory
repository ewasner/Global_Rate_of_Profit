".",
input$CL_fformat),
":"," -")},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_GroupPlot1())
dev.off()
})
## Download Handler for Plot 2
output$CL_downloadPlot2Group <- downloadHandler(
filename = function(){str_replace(paste0("RateOfProfitDecomposition - ",
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
" - ",
input$CL_dataSource,
".",
input$CL_fformat),
":"," -")},
content = function(file) {
do.call(input$CL_fformat,list(file))
if(input$CL_plot2Type=="histogram"){
print(CL_GroupPlot2Histogram())
} else{
print(CL_GroupPlot2TimeSeries())
}
dev.off()
})
## Download Handler for Data
output$CL_downloadDataGroup <- downloadHandler(
filename = function(){str_replace(paste0("RateofProfit Data - ",
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
" - ",
input$CL_dataSource,
".csv"),
":"," -")},
content = function(file){
write.table(data.CL.Group(), file = file, sep = ",", row.names = FALSE)
}
)
## If the user has selected the WIOD data source, display text which explains
## aggregation by income group is only available for the EPWT.
## Otherwise display the proper plots and download buttons
output$CL_WIODgroupText <- renderText({"Aggregation by income group is only available for the EPWT data set due to the limited number of countries contained within the WIOD data set."})
output$CL_groupMainPanel <- renderUI({
if(input$CL_dataSource == "WIOD"){
textOutput("CL_WIODgroupText")
} else{
list(
plotOutput("CL_plotGroup1"),
div(downloadButton("CL_downloadPlot1Group", "Download Plot 1"),style="float:right"),
br(),
br(),
plotOutput("CL_plotGroup2"),
div(downloadButton("CL_downloadPlot2Group", "Download Plot 2"),style="float:right"))
}
})
###################### Individual Country Profit Rate ########################
## EPWT Data for individual country selection
data.CL.EPWT.Country <- reactive({
EPWT %>%
filter(country==if(is.null(input$CL_country)){"United States"}else{input$CL_country},
format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y")) %>%
select(year,OCR,PS,ROP)
})
## WIOD Data for individual country selection
data.CL.WIOD.Country <- reactive({
WIOD %>%
filter(format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"),
Name==if(is.null(input$CL_country)){"United States"}else{input$CL_country}) %>%
group_by(year, Name) %>%
summarize(across(c(K, CAP, VA), sum)) %>%
mutate(OCR=VA/K,
PS=CAP/VA,
ROP=100*OCR*PS)
})
## Create a list with both EPWT and WIOD data for user selection by token input$CL_dataSource
data.CL.Country <- reactive({
list("EPWT" = data.CL.EPWT.Country()[with(data.CL.EPWT.Country(),order(year)),],
"WIOD" = data.CL.WIOD.Country()[with(data.CL.WIOD.Country(),order(year)),])
})
## Create df with average annual growth rates for OCR, PS, and ROP
data.CL.Country.GR <- reactive({
data.frame(gr_OCR = avg_GR(data.CL.Country()[[input$CL_dataSource]]$OCR),
gr_PS = avg_GR(data.CL.Country()[[input$CL_dataSource]]$PS),
gr_ROP=avg_GR(data.CL.Country()[[input$CL_dataSource]]$ROP))
})
## Plot Country ROP
CL_CountryPlot1 <- reactive({
ggplot(data = data.CL.Country()[[input$CL_dataSource]],
aes(x=as.Date(as.character(year), "%Y"), y=ROP)) +
geom_line() +
{if(input$CL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$CL_trendLine]][1],
formula=ui.trendLineList[[input$CL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Percentage",
title=paste0(if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" Annual Rate of Profit"),
subtitle=input$CL_dataSource) +
theme_minimal()
})
## Plot Country ROP - output
output$CL_plotCountry1 <- renderPlot({
CL_CountryPlot1()
})
## Plot Country ROP Decomposition
CL_CountryPlot2Histogram <- reactive({
ggplot(data = data.CL.Country.GR() %>%
gather("Measure",
"Value"),
aes(x=Measure, y=Value, fill=Measure)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_minimal() +
theme(axis.text.x=element_blank()) +
scale_fill_manual("Measure",
values = c("navajowhite1",
"lightsalmon1",
"lightsalmon4"),
labels = c("Output-Capital Ratio",
"Profit Share",
"Rate of Profit")) +
labs(x="",
y="Average Growth Rate (%)",
title="Rate of Profit Decomposition",
subtitle=paste0("Average Rates of Growth: ",
format(input$CL_dateStart,format="%Y"),
" - ",
format(input$CL_dateEnd,format="%Y")))
})
CL_CountryPlot2TimeSeries <- reactive({
ggplot(data = data.CL.Country()[[input$CL_dataSource]] %>%
select(year,OCR,PS) %>%
gather("Measure",
"Value",
-year),
aes(x=as.Date(as.character(year), "%Y"), y=Value, color=Measure)) +
geom_line() +
{if(input$CL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$CL_trendLine]][1],
formula=ui.trendLineList[[input$CL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Ratio",
title=paste0("Rate of Profit Decomposition")) +
scale_color_discrete(labels = c("Output-Capital Ratio",
"Profit Share")) +
theme_minimal()
})
## Plot Country ROP Decomposition - output
output$CL_plotCountry2 <- renderPlot({
if(input$CL_plot2Type=="histogram"){
CL_CountryPlot2Histogram()
} else{
CL_CountryPlot2TimeSeries()
}
})
## Download Handler for Plot 1
output$CL_downloadPlot1Country <- downloadHandler(
filename = function(){paste0("RateOfProfit - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_CountryPlot1())
dev.off()
})
## Download Handler for Plot 2
output$CL_downloadPlot2Country <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
if(input$CL_plot2Type=="histogram"){
print(CL_CountryPlot2Histogram())
} else{
print(CL_CountryPlot2TimeSeries())
}
dev.off()
})
## Download Handler for Data
output$CL_downloadDataCountry <- downloadHandler(
filename = function(){paste0("RateofProfit Data - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".csv")},
content = function(file){
write.table(data.CL.Country()[[input$CL_dataSource]],
file = file, sep = ",", row.names = FALSE)
}
)
## If the user has selected the WIOD data source and a country which is not included in WIOD,
## then display a table which shows which countries are available in each data source.
## Otherwise display the proper plots and download buttons
output$CL_WIODcountryText <- renderText({"The selected country is not available in the WIOD data set. The table below displays the countries available within each data source:"})
output$CL_WIODcountryTable <- renderTable({ui.CL_CountriesTable},sanitize.text.function = identity)
output$CL_countryMainPanel <- renderUI({
if(input$CL_dataSource == "WIOD" & !((if(is.null(input$CL_country)){"United States"}else{input$CL_country}) %in% unique(WIOD$Name))){
list(
textOutput("CL_WIODcountryText"),
br(),
tableOutput("CL_WIODcountryTable"),
tags$head(tags$style("#CL_WIODcountryTable table {background-color: white; }", media="screen", type="text/css")))
} else{
list(
plotOutput("CL_plotCountry1"),
div(downloadButton("CL_downloadPlot1Country", "Download Plot 1"),style="float:right"),
br(),
br(),
plotOutput("CL_plotCountry2"),
div(downloadButton("CL_downloadPlot2Country", "Download Plot 2"),style="float:right"))
}
})
############################################# Industry-Level ###############################################
## Conditional Panel to display
output$IL_conditionalPanel <- renderUI({
if(input$IL_tab=="By Group"){
selectInput(inputId = "IL_group", ## Income Group
label = "Income Group:",
choices = sort(unique(WIOD$wb_income_group)),
selected = "High income: OECD")
} else if(input$IL_tab=="By Country"){
selectInput(inputId = "IL_country", ## Country
label = "Country:",
choices = sort(unique(WIOD$Name)),
selected = "United States")
}
})
## Download button for sidePanel
output$IL_downloadData <- renderUI({
if(input$IL_tab=="Global"){
downloadButton("IL_downloadDataGlobal", "Download Data")
} else if(input$IL_tab=="By Group"){
downloadButton("IL_downloadDataGroup", "Download Data")
} else if(input$IL_tab=="By Country"){
downloadButton("IL_downloadDataCountry", "Download Data")
}
})
## Download Handler for downloading explanatory pdf
output$IL_downloadExplanationFile <- downloadHandler(
filename = "world-profitability.pdf",
content = function(file) {
file.copy("world-profitability.pdf", file)
})
## Shiny cannot use the same output multiple times --> therefore must define three separate outputs to reuse text
output$IL_text <- renderUI({description})
###################### Global Profit Rate ########################
data.IL.WIOD.Global <- reactive({
na.omit(WIOD) %>%
filter(format(input$IL_dateStart,format="%Y") <= year & year <= format(input$IL_dateEnd,format="%Y"),
description == input$IL_industry,
K!=0) %>%
group_by(year, country) %>% summarize(across(c(K, CAP, VA), sum)) %>%
mutate(OCR=VA/K,
PS=CAP/VA,
ROP=100*OCR*PS,
Kshare=K/sum(K),
Yshare=VA/sum(VA)) %>% group_by(year) %>%
## Compute weighted average of ROP, PS, and OCR
summarise(ROP=sum(ROP*Kshare),
PS=sum(PS*Yshare),
OCR=sum(OCR*Kshare))
})
## Create df with average annual growth rates for OCR, PS, and ROP
data.IL.WIOD.Global.GR <- reactive({
data.frame(gr_OCR = avg_GR(data.IL.WIOD.Global()$OCR),
gr_PS = avg_GR(data.IL.WIOD.Global()$PS),
gr_ROP=avg_GR(data.IL.WIOD.Global()$ROP))
})
## Plot Global ROP
IL_GlobalPlot1 <- reactive({
ggplot(data = data.IL.WIOD.Global(),
aes(x=as.Date(as.character(year), "%Y"), y=ROP)) +
geom_line() +
{if(input$IL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$IL_trendLine]][1],
formula=ui.trendLineList[[input$IL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Percentage",
title="Global Annual Rate of Profit",
subtitle=input$IL_industry) +
theme_minimal()
})
## Plot Global ROP - output
output$IL_plotGlobal1 <- renderPlot({
IL_GlobalPlot1()
})
## Plot Global ROP Decomposition
IL_GlobalPlot2Histogram <- reactive({
ggplot(data = data.IL.WIOD.Global.GR() %>%
gather("Measure",
"Value"),
aes(x=Measure, y=Value, fill=Measure)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_minimal() +
theme(axis.text.x=element_blank()) +
scale_fill_manual("Measure",
values = c("navajowhite1",
"lightsalmon1",
"lightsalmon4"),
labels = c("Output-Capital Ratio",
"Profit Share",
"Rate of Profit")) +
labs(x="",
y="Average Growth Rate (%)",
title="Rate of Profit Decomposition",
subtitle=paste0("Average Rates of Growth: ",format(input$IL_dateStart,format="%Y")," - ",format(input$IL_dateEnd,format="%Y")))
})
IL_GlobalPlot2TimeSeries <- reactive({
ggplot(data = data.IL.WIOD.Global() %>%
select(year,OCR,PS) %>%
gather("Measure",
"Value",
-year),
aes(x=as.Date(as.character(year), "%Y"), y=Value, color=Measure)) +
geom_line() +
{if(input$IL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$IL_trendLine]][1],
formula=ui.trendLineList[[input$IL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Ratio",
title=paste0("Rate of Profit Decomposition")) +
scale_color_discrete(labels = c("Output-Capital Ratio",
"Profit Share")) +
theme_minimal()
})
## Plot Global ROP Decomposition - output
output$IL_plotGlobal2 <- renderPlot({
if(input$IL_plot2Type=="histogram"){
IL_GlobalPlot2Histogram()
} else{
IL_GlobalPlot2TimeSeries()
}
})
## Download Handler for Plot 1
output$IL_downloadPlot1Global <- downloadHandler(
filename = function(){paste0("RateOfProfit - Global - ",
input$IL_industry,
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_GlobalPlot1())
dev.off()
})
## Download Handler for Plot 2
output$IL_downloadPlot2Global <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - Global - ",
input$IL_industry,
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
if(input$IL_plot2Type=="histogram"){
print(IL_GlobalPlot2Histogram())
} else{
print(IL_GlobalPlot2TimeSeries())
}
dev.off()
})
## Download Handler for Data
output$IL_downloadDataGlobal <- downloadHandler(
filename = function(){paste0("RateofProfit Data - Global - ",
input$IL_industry,
".csv")},
content = function(file){
write.table(data.IL.WIOD.Global(), file = file, sep = ",", row.names = FALSE)
}
)
###################### Country Profit Rate ########################
data.IL.WIOD.Country <- reactive({
na.omit(WIOD) %>%
filter(format(input$IL_dateStart,format="%Y") <= year & year <= format(input$IL_dateEnd,format="%Y"),
description == input$IL_industry,
K!=0,
Name == if(is.null(input$IL_country)){"United States"}else{input$IL_country}) %>%
mutate(OCR=VA/K,
PS=CAP/VA,
ROP=100*OCR*PS) %>%
select(year,OCR,PS,ROP)
})
## Create df with average annual growth rates for OCR, PS, and ROP
data.IL.WIOD.Country.GR <- reactive({
data.frame(gr_OCR = avg_GR(data.IL.WIOD.Country()[with(data.IL.WIOD.Country(),order(year)),]$OCR),
gr_PS = avg_GR(data.IL.WIOD.Country()[with(data.IL.WIOD.Country(),order(year)),]$PS),
gr_ROP=avg_GR(data.IL.WIOD.Country()[with(data.IL.WIOD.Country(),order(year)),]$ROP))
})
## Plot Country ROP
IL_CountryPlot1 <- reactive({
ggplot(data = data.IL.WIOD.Country(),
aes(x=as.Date(as.character(year), "%Y"), y=ROP)) +
geom_line() +
{if(input$IL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$IL_trendLine]][1],
formula=ui.trendLineList[[input$IL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Percentage",
title=paste0(if(is.null(input$IL_country)){"United States"}else{input$IL_country}, " Annual Rate of Profit"),
subtitle=input$IL_industry) +
theme_minimal()
})
## Plot Country ROP - output
output$IL_plotCountry1 <- renderPlot({
IL_CountryPlot1()
})
## Plot Country ROP Decomposition
IL_CountryPlot2Histogram <- reactive({
ggplot(data = data.IL.WIOD.Country.GR() %>%
gather("Measure",
"Value"),
aes(x=Measure, y=Value, fill=Measure)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_minimal() +
theme(axis.text.x=element_blank()) +
scale_fill_manual("Measure",
values = c("navajowhite1",
"lightsalmon1",
"lightsalmon4"),
labels = c("Output-Capital Ratio",
"Profit Share",
"Rate of Profit")) +
labs(x="",
y="Average Growth Rate (%)",
title="Rate of Profit Decomposition",
subtitle=paste0("Average Rates of Growth: ",format(input$IL_dateStart,format="%Y")," - ",format(input$IL_dateEnd,format="%Y")))
})
IL_CountryPlot2TimeSeries <- reactive({
ggplot(data = data.IL.WIOD.Country() %>%
select(year,OCR,PS) %>%
gather("Measure",
"Value",
-year),
aes(x=as.Date(as.character(year), "%Y"), y=Value, color=Measure)) +
geom_line() +
{if(input$IL_trendLine[[1]]!="None")
geom_smooth(method=ui.trendLineList[[input$IL_trendLine]][1],
formula=ui.trendLineList[[input$IL_trendLine]][2],
se=FALSE,
linetype="dashed")} +
labs(x="Year",
y="Ratio",
title=paste0("Rate of Profit Decomposition")) +
scale_color_discrete(labels = c("Output-Capital Ratio",
"Profit Share")) +
theme_minimal()
})
## Plot Country ROP Decomposition - output
output$IL_plotCountry2 <- renderPlot({
if(input$IL_plot2Type=="histogram"){
IL_CountryPlot2Histogram()
} else{
IL_CountryPlot2TimeSeries()
}
})
## Download Handler for Plot 1
output$IL_downloadPlot1Country <- downloadHandler(
filename = function(){paste0("RateOfProfit - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_CountryPlot1())
dev.off()
})
## Download Handler for Plot 2
output$IL_downloadPlot2Country <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
if(input$IL_plot2Type=="histogram"){
print(IL_CountryPlot2Histogram())
} else{
print(IL_CountryPlot2TimeSeries())
}
dev.off()
})
## Download Handler for Data
output$IL_downloadDataCountry <- downloadHandler(
filename = function(){paste0("RateofProfit Data - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".csv")},
content = function(file){
write.table(data.IL.WIOD.Country(), file = file, sep = ",", row.names = FALSE)
}
)
}
shinyApp(ui = ui, server = server)
