data.CL.EPWT.Global.All <- reactive({
data <- currencyConversion(EPWT,input$CL_currencyConversion) %>%
filter(format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"))
list(data %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
## Global EPWT data - Using only countries which have observations in every year in the user's time selection
data.CL.EPWT.Global.LimitCountries <- reactive({
data <- currencyConversion(EPWT,input$CL_currencyConversion) %>%
filter(format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"))
## Create a list of countries which have data in all years selected
validCountries <- group_by(data,countrycode) %>% summarise(length=n()) %>% filter(length==max(length))
data <- data %>% filter(countrycode %in% validCountries$countrycode)
list(data %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
## Create list with both All and LimitCountries dfs for EPWT
data.CL.EPWT.Global <- reactive({
list(All=data.CL.EPWT.Global.All(),
LimitCountries=data.CL.EPWT.Global.LimitCountries())
})
## Create WIOD data
data.CL.WIOD.Global <- reactive({
data <- currencyConversion(WIOD,input$CL_currencyConversion) %>%
filter(format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"))
list(data %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
## Create a list with both EPWT and WIOD data for user selection by token input$CL_dataSource
data.CL.Global <- reactive({
list("EPWT" = data.CL.EPWT.Global()[[if(is.null(input$CL_aggregate)){"LimitCountries"}else{input$CL_aggregate}]],
"WIOD" = data.CL.WIOD.Global())
})
# Plot Global ROP
CL_GlobalPlot1 <- reactive({
plot1(data.CL.Global()[[input$CL_dataSource]][[1]],
data.CL.Global()[[input$CL_dataSource]][[2]],
"Global",
input$CL_dataSource,
if(is.null(input$CL_aggregate)){"LimitCountries"}else{input$CL_aggregate},
input$CL_trendLine)
})
## Plot Global ROP - output
output$CL_plotGlobal1 <- renderPlot({
CL_GlobalPlot1()
})
## Plot Global ROP Decomposition
CL_GlobalPlot2 <- reactive({
plot2(input$CL_plot2Type,
data.CL.Global()[[input$CL_dataSource]][[1]],
min(data.CL.Global()[[input$CL_dataSource]][[1]]$year),
max(data.CL.Global()[[input$CL_dataSource]][[1]]$year),
input$CL_trendLine)
})
## Plot Global ROP Decomposition - output
output$CL_plotGlobal2 <- renderPlot({
CL_GlobalPlot2()
})
## Download Handler for Plot 1
output$CL_downloadPlot1Global <- downloadHandler(
filename = function(){paste0("RateOfProfit - Global - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_GlobalPlot1())
dev.off()
})
## Download Handler for Plot 2
output$CL_downloadPlot2Global <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - Global - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_GlobalPlot2())
dev.off()
})
## Download Handler for Global ROP data
output$CL_downloadDataGlobal <- downloadHandler(
filename = function(){paste0("RateofProfit Data - Global - ",
input$CL_dataSource,
".csv")},
content = function(file){
write.table(data.CL.Global()[[input$CL_dataSource]][[1]], file = file, sep = ",", row.names = FALSE)
}
)
###################### Income Group Profit Rate ########################
## Group EPWT data - Using all available data observations from each year
data.CL.EPWT.Group.All <- reactive({
data <- currencyConversion(EPWT,input$CL_currencyConversion) %>%
filter(wb_income_group==if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"))
list(data %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
## Group EPWT data - Using only countries which have observations in every year in the user's time selection
data.CL.EPWT.Group.LimitCountries <- reactive({
## Filter for countries which have observations for every year in selected date range
data <- currencyConversion(EPWT,input$CL_currencyConversion) %>%
filter(wb_income_group==if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"))
## Create a list of countries which have data in all years selected
validCountries <- group_by(data,countrycode) %>% summarise(length=n()) %>% filter(length==max(length))
data <- data %>% filter(countrycode %in% validCountries$countrycode)
list(data %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
## Create list with both All and LimitCountries dfs
data.CL.EPWT.Group <- reactive({
list(All=data.CL.EPWT.Group.All(),
LimitCountries=data.CL.EPWT.Group.LimitCountries())
})
## Create a list with both EPWT and WIOD data for user selection by token input$CL_dataSource
data.CL.Group <- reactive({
data.CL.EPWT.Group()[[if(is.null(input$CL_aggregate)){"LimitCountries"}else{input$CL_aggregate}]]
})
## Plot Group ROP
CL_GroupPlot1 <- reactive({
plot1(data.CL.Group()[[1]],
data.CL.Group()[[2]],
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
input$CL_dataSource,
if(is.null(input$CL_aggregate)){"LimitCountries"}else{input$CL_aggregate},
input$CL_trendLine)
})
## Plot Group ROP - output
output$CL_plotGroup1 <- renderPlot({
CL_GroupPlot1()
})
## Plot Global ROP Decomposition
CL_GroupPlot2 <- reactive({
plot2(input$CL_plot2Type,
data.CL.Group()[[1]],
min(data.CL.Group()[[1]]$year),
max(data.CL.Group()[[1]]$year),
input$CL_trendLine)
})
## Plot Group ROP Decomposition
output$CL_plotGroup2 <- renderPlot({
CL_GroupPlot2()
})
## Download Handler for Plot 1
output$CL_downloadPlot1Group <- downloadHandler(
filename = function(){str_replace(paste0("RateOfProfit - ",
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
" - ",
input$CL_dataSource,
".",
input$CL_fformat),
":"," -")},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_GroupPlot1())
dev.off()
})
## Download Handler for Plot 2
output$CL_downloadPlot2Group <- downloadHandler(
filename = function(){str_replace(paste0("RateOfProfitDecomposition - ",
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
" - ",
input$CL_dataSource,
".",
input$CL_fformat),
":"," -")},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_GroupPlot2())
dev.off()
})
## Download Handler for Data
output$CL_downloadDataGroup <- downloadHandler(
filename = function(){str_replace(paste0("RateofProfit Data - ",
if(is.null(input$CL_group)){"High income: OECD"}else{input$CL_group},
" - ",
input$CL_dataSource,
".csv"),
":"," -")},
content = function(file){
write.table(data.CL.Group()[[1]], file = file, sep = ",", row.names = FALSE)
}
)
## If the user has selected the WIOD data source, display text which explains
## aggregation by income group is only available for the EPWT.
## Otherwise display the proper plots and download buttons
output$CL_WIODgroupText <- renderText({"Aggregation by income group is only available for the EPWT data set due to the limited number of countries contained within the WIOD data set."})
output$CL_groupMainPanel <- renderUI({
if(input$CL_dataSource == "WIOD"){
textOutput("CL_WIODgroupText")
} else{
list(
plotOutput("CL_plotGroup1"),
div(downloadButton("CL_downloadPlot1Group", "Download Plot 1"),style="float:right"),
br(),
br(),
plotOutput("CL_plotGroup2"),
div(downloadButton("CL_downloadPlot2Group", "Download Plot 2"),style="float:right"))
}
})
###################### Individual Country Profit Rate ########################
## EPWT Data for individual country selection
data.CL.EPWT.Country <- reactive({
EPWT %>%
filter(country==if(is.null(input$CL_country)){"United States"}else{input$CL_country},
format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y")) %>%
select(year,OCR,PS,ROP)
})
## WIOD Data for individual country selection
data.CL.WIOD.Country <- reactive({
WIOD %>%
filter(format(input$CL_dateStart,format="%Y") <= year & year <= format(input$CL_dateEnd,format="%Y"),
country==if(is.null(input$CL_country)){"United States"}else{input$CL_country}) %>%
group_by(year, country) %>%
summarize(across(c(K, Profit, Y), sum)) %>%
mutate(OCR=Y/K,
PS=Profit/Y,
ROP=100*OCR*PS)
})
## Create a list with both EPWT and WIOD data for user selection by token input$CL_dataSource
data.CL.Country <- reactive({
list("EPWT" = data.CL.EPWT.Country()[with(data.CL.EPWT.Country(),order(year)),],
"WIOD" = data.CL.WIOD.Country()[with(data.CL.WIOD.Country(),order(year)),])
})
## Plot Group ROP
CL_CountryPlot1 <- reactive({
plot1(data.CL.Country()[[input$CL_dataSource]],
NA,
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
input$CL_dataSource,
"Country",
input$CL_trendLine)
})
## Plot Country ROP - output
output$CL_plotCountry1 <- renderPlot({
CL_CountryPlot1()
})
## Plot Global ROP Decomposition
CL_CountryPlot2 <- reactive({
plot2(input$CL_plot2Type,
data.CL.Country()[[input$CL_dataSource]],
min(data.CL.Country()[[input$CL_dataSource]]$year),
max(data.CL.Country()[[input$CL_dataSource]]$year),
input$CL_trendLine)
})
## Plot Country ROP Decomposition - output
output$CL_plotCountry2 <- renderPlot({
CL_CountryPlot2()
})
## Download Handler for Plot 1
output$CL_downloadPlot1Country <- downloadHandler(
filename = function(){paste0("RateOfProfit - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_CountryPlot1())
dev.off()
})
## Download Handler for Plot 2
output$CL_downloadPlot2Country <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".",
input$CL_fformat)},
content = function(file) {
do.call(input$CL_fformat,list(file))
print(CL_CountryPlot2())
dev.off()
})
## Download Handler for Data
output$CL_downloadDataCountry <- downloadHandler(
filename = function(){paste0("RateofProfit Data - ",
if(is.null(input$CL_country)){"United States"}else{input$CL_country},
" - ",
input$CL_dataSource,
".csv")},
content = function(file){
write.table(data.CL.Country()[[input$CL_dataSource]],
file = file, sep = ",", row.names = FALSE)
}
)
## If the user has selected the WIOD data source and a country which is not included in WIOD,
## then display a table which shows which countries are available in each data source.
## Otherwise display the proper plots and download buttons
output$CL_WIODcountryText <- renderText({"The selected country is not available in the WIOD data set. The table below displays the countries available within each data source:"})
output$CL_WIODcountryTable <- renderTable({ui.CL_CountriesTable},sanitize.text.function = identity)
output$CL_countryMainPanel <- renderUI({
if(input$CL_dataSource == "WIOD" & !((if(is.null(input$CL_country)){"United States"}else{input$CL_country}) %in% unique(WIOD$country))){
list(
textOutput("CL_WIODcountryText"),
br(),
tableOutput("CL_WIODcountryTable"),
tags$head(tags$style("#CL_WIODcountryTable table {background-color: white; }", media="screen", type="text/css")))
} else{
list(
plotOutput("CL_plotCountry1"),
div(downloadButton("CL_downloadPlot1Country", "Download Plot 1"),style="float:right"),
br(),
br(),
plotOutput("CL_plotCountry2"),
div(downloadButton("CL_downloadPlot2Country", "Download Plot 2"),style="float:right"))
}
})
############################################# Industry-Level ###############################################
## Conditional Panel to display
output$IL_conditionalPanel <- renderUI({
if(input$IL_tab=="By Group"){
selectInput(inputId = "IL_group", ## Income Group
label = "Income Group:",
choices = sort(unique(WIOD$wb_income_group)),
selected = "High income: OECD")
} else if(input$IL_tab=="By Country"){
selectInput(inputId = "IL_country", ## Country
label = "Country:",
choices = sort(unique(WIOD$country)),
selected = "United States")
}
})
## Download button for sidePanel
output$IL_downloadData <- renderUI({
if(input$IL_tab=="Global"){
downloadButton("IL_downloadDataGlobal", "Download Data")
} else if(input$IL_tab=="By Group"){
downloadButton("IL_downloadDataGroup", "Download Data")
} else if(input$IL_tab=="By Country"){
downloadButton("IL_downloadDataCountry", "Download Data")
}
})
## Download Handler for downloading explanatory pdf
output$IL_downloadExplanationFile <- downloadHandler(
filename = "world-profitability.pdf",
content = function(file) {
file.copy("global-rop.pdf", file)
})
## Shiny cannot use the same output multiple times --> therefore must define three separate outputs to reuse text
output$IL_text <- renderUI({description})
###################### Global Profit Rate ########################
data.IL.WIOD.Global <- reactive({
data <- na.omit(currencyConversion(WIOD,input$IL_currencyConversion)) %>%
filter(format(input$IL_dateStart,format="%Y") <= year & year <= format(input$IL_dateEnd,format="%Y"),
description == input$IL_industry,
K!=0)
list(data %>%
group_by(year, country) %>% summarize(across(c(K, Profit, Y), sum)) %>%
group_by(year) %>%
## Compute ROP, PS, OCR with global sums of profits, capital stocks, and value added
summarise(ROP=100*sum(Profit)/sum(K),
PS=sum(Profit)/sum(Y),
OCR=sum(Y)/sum(K)),
length(unique(data$countrycode)))
})
# Plot Global ROP
IL_GlobalPlot1 <- reactive({
plot1(data.IL.WIOD.Global()[[1]],
data.IL.WIOD.Global()[[2]],
"Global",
"WIOD",
input$IL_industry,
input$IL_trendLine)
})
## Plot Global ROP - output
output$IL_plotGlobal1 <- renderPlot({
IL_GlobalPlot1()
})
## Plot Global ROP Decomposition
IL_GlobalPlot2 <- reactive({
plot2(input$IL_plot2Type,
data.IL.WIOD.Global()[[1]],
min(data.IL.WIOD.Global()[[1]]$year),
max(data.IL.WIOD.Global()[[1]]$year),
input$IL_trendLine)
})
## Plot Global ROP Decomposition - output
output$IL_plotGlobal2 <- renderPlot({
IL_GlobalPlot2()
})
## Download Handler for Plot 1
output$IL_downloadPlot1Global <- downloadHandler(
filename = function(){paste0("RateOfProfit - Global - ",
input$IL_industry,
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_GlobalPlot1())
dev.off()
})
## Download Handler for Plot 2
output$IL_downloadPlot2Global <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - Global - ",
input$IL_industry,
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_GlobalPlot2())
dev.off()
})
## Download Handler for Data
output$IL_downloadDataGlobal <- downloadHandler(
filename = function(){paste0("RateofProfit Data - Global - ",
input$IL_industry,
".csv")},
content = function(file){
write.table(data.IL.WIOD.Global()[[1]], file = file, sep = ",", row.names = FALSE)
}
)
###################### Country Profit Rate ########################
data.IL.WIOD.Country <- reactive({
na.omit(WIOD) %>%
filter(format(input$IL_dateStart,format="%Y") <= year & year <= format(input$IL_dateEnd,format="%Y"),
description == input$IL_industry,
K!=0,
country == if(is.null(input$IL_country)){"United States"}else{input$IL_country}) %>%
select(year,OCR,PS,ROP)
})
# Plot Country ROP
IL_CountryPlot1 <- reactive({
plot1(data.IL.WIOD.Country(),
NA,
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
"WIOD",
input$IL_industry,
input$IL_trendLine)
})
## Plot Country ROP - output
output$IL_plotCountry1 <- renderPlot({
IL_CountryPlot1()
})
## Plot Global ROP Decomposition
IL_CountryPlot2 <- reactive({
plot2(input$IL_plot2Type,
data.IL.WIOD.Country(),
min(data.IL.WIOD.Country()$year),
max(data.IL.WIOD.Country()$year),
input$IL_trendLine)
})
## Plot Country ROP Decomposition - output
output$IL_plotCountry2 <- renderPlot({
IL_CountryPlot2()
})
## Download Handler for Plot 1
output$IL_downloadPlot1Country <- downloadHandler(
filename = function(){paste0("RateOfProfit - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_CountryPlot1())
dev.off()
})
## Download Handler for Plot 2
output$IL_downloadPlot2Country <- downloadHandler(
filename = function(){paste0("RateOfProfitDecomposition - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".",
input$IL_fformat)},
content = function(file) {
do.call(input$IL_fformat,list(file))
print(IL_CountryPlot2())
dev.off()
})
## Download Handler for Data
output$IL_downloadDataCountry <- downloadHandler(
filename = function(){paste0("RateofProfit Data - ",
input$IL_industry,
" - ",
if(is.null(input$IL_country)){"United States"}else{input$IL_country},
".csv")},
content = function(file){
write.table(data.IL.WIOD.Country(), file = file, sep = ",", row.names = FALSE)
}
)
}
shinyApp(ui = ui, server = server)
